---
- name: Create the Mesos VPC
  ec2_vpc:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: present
    cidr_block: 174.0.0.0/16
    resource_tags: { "Name": "[{{ mesos_cluster_id }}] Mesos VPC", "Environment": "Mesos", "ClusterId": "{{ mesos_cluster_id }}"}
    subnets:
      - cidr: 174.0.1.0/24
        az: "{{ aws_subnet_az }}"
        resource_tags: { "Name": "[{{ mesos_cluster_id }}] Mesos Subnet", "Environment": "Mesos" }
    internet_gateway: True
    route_tables:
      - subnets:
          - 174.0.1.0/24
        routes:
          - dest: 0.0.0.0/0
            gw: igw
    region: "{{ aws_region }}"
    wait: yes
  register: vpc

- name: Bind VPC subnet ID
  set_fact:
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"

- name: Create the public subnet security group
  ec2_group:
    name: "[{{ mesos_cluster_id }}] Mesos Public Subnet Security Group"
    description: "Base Security group for Mesos"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ aws_region }}"
    purge_rules: yes
    purge_rules_egress: yes
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "0.0.0.0/0"

- name: Create the ZooKeeper security group
  ec2_group:
    name: "[{{ mesos_cluster_id }}] ZooKeeper Security Group"
    description: "Security group for ZooKeeper"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 2181
        to_port: 2181
        cidr_ip: 174.0.1.0/24
      - proto: tcp
        from_port: 2888
        to_port: 2888
        cidr_ip: 174.0.1.0/24
      - proto: tcp
        from_port: 3888
        to_port: 3888
        cidr_ip: 174.0.1.0/24

- name: Create the Mesos Master security group
  ec2_group:
    name: "[{{ mesos_cluster_id }}] Mesos Master Security Group"
    description: "Security group for Mesos Master"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 5050
        to_port: 5050
        cidr_ip: 0.0.0.0/0

- name: Create the Mesos Slave security group
  ec2_group:
    name: "[{{ mesos_cluster_id }}] Mesos Slave Security Group"
    description: "Security group for Mesos Slave"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 5051
        to_port: 5051
        cidr_ip: 174.0.1.0/24

- name: Create the Marathon security group
  ec2_group:
    name: "[{{ mesos_cluster_id }}] Marathon Security Group"
    description: "Security group for Marathon"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      # Open ports for app assignment and ephemeral connections
      - proto: tcp
        from_port: 31000
        to_port: 65535
        cidr_ip: 174.0.1.0/24
